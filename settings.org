#+TITLE: Settings
#+AUTHOR: Lorenzo Cabrini
#+LANGUAGE: en
#+FILETAGS: :emacs:config:

This is my personal Emacs configuration. As most Emacs users, I maintain this
as an org-mode file.

*NOTE*: I do not use Doom Emacs, Spacemacs or any other "distribution", just
vanilla Emacs. However, I have added some packages that I find useful from 
Doom Emacs (not sure about Spacemacs).

Although I've been using Emacs for quite a long time, I'm by no means an expert
on it. Most of the stuff collected here has been "borrowed" from elsewhere. 

A partial list of Emacs configs that I have found useful follows:
- [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]: the Queen of Emacs. Lots of useful stuff here.
- [[https://github.com/daedreth/UncleDavesEmacs][Uncle Dave]]: detailed Emacs configuration.

* Basics
** Personal Information
#+begin_src emacs-lisp
  (setq user-full-name "Lorenzo Cabrini"
        user-email-address "lorenzo.cabrini@gmail.com")
#+end_src

** Startup
Load up my index file on startup.

#+begin_src emacs-lisp
(setq initial-buffer-choice "~/org/index.org")
#+end_src

** Which Key
The [[https://github.com/justbur/emacs-which-key][which-key]] package is a neat little utility that shows possible completions
of a command.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
** Language Environment
Use UTF-8.

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
#+end_src
** Performance
Some performacs related settings, mostly required by lsp-mode (see below).

#+begin_src emacs-lisp
  (setq gc-cons-threshold 200000000)
  (setq read-process-output-max (* 1024 1024))
#+end_src
* User Interface
My user interface setup.

#+begin_src emacs-lisp
  (blink-cursor-mode 0)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-hl-line-mode t)
#+end_src

** Icons

The [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] package provides icons. You need to run the following the
install the required fonts:

#begin_example
  M-x all-the-icons-install-fonts
#+end_example

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

We might as well add icons to dired mode as well. Silly, but pretty. ;)

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after all-the-icons
    :hook
    (dired-mode . all-the-icons-dired-mode))
#+end_src
** Theme
I normally prefer a blue theme, since it reminds me of the Amiga. However, I
also like to switch themes from time to time. 

*** Sanityinc Tomorrow Blue
This is my favorite theme and the one I use most of the time. ([[https://github.com/purcell/color-theme-sanityinc-tomorrow][GitHub]])

#+begin_src emacs-lisp
  ;; (use-package color-theme-sanityinc-tomorrow
  ;;   :ensure t
  ;;   :init
  ;;   (load-theme 'sanityinc-tomorrow-blue t))
#+end_src

*** Zenburn
This is not a bad theme. ([[https://github.com/bbatsov/zenburn-emacs][GitHub]])

#+begin_src emacs-lisp
  ;; (use-package zenburn-theme
  ;;   :ensure t
  ;;   :init
  ;;   (load-theme 'zenburn t))
#+end_src

I found a few modifications [[https://github.com/bbatsov/zenburn-emacs/issues/350][here]] to make some things a little easier to
read.

#+begin_src emacs-lisp
  (setq zenburn-override-colors-alist
        '(("zenburn-red" . "#de7a78")
          ("zenburn-bg-05" . "#292928")
          ("zenburn-bg" . "#3b3837")))

#+end_src
*** Dracula

The Dracula theme is becoming my new favorite.

#+begin_src emacs-lisp
  (use-package dracula-theme
    :ensure t
    :init
    (setq dracula-enlarge-headings nil)
    :config
    (load-theme 'dracula t))
#+end_src

I don't like the large headings.

#+begin_src emacs-lisp

#+end_src
*** Doom Themes

I just tried this out and kind of like it.

#+begin_src emacs-lisp
  ;; (use-package doom-themes
  ;;  :config
  ;;  (setq doom-themes-enable-bold t
  ;;        doom-themes-enable-italic t)
  ;;  (load-theme 'doom-one t)
  ;;  (doom-themes-org-config))
#+end_src
** Modeline
I struggled to get the modeline the way I wanted it. The default modeline
easily gets cluttered with minor modes, so important information gets hidden
away. [[https://github.com/milkypostman/powerline][Powerline]] only tries to be pretty, without addressing functionality.

I could probably spend some time configuring the modeline or powerline to
my liking, but with so many other things to configure, you'd think that the
default would be simple and uncluttered. I didn't feel like I had found the
right solution.

Then I came across [[https://github.com/seagle0128/doom-modeline][doom-modeline]] and I like it. It's simple and clean, so I
can see the information that I need to. Perhaps it's not as "pretty" as
powerline (though this is in the eye of the beholder), but I'll happily 
sacrifice looks for functionality.

For now, I'm quite happy with the default layout. If ever it becomes important
to me, I'll customize that as well.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-icon t)
    (setq doom-modeline-buffer-file-name-style 'file-name)
    (column-number-mode t))
#+end_src

Since I don't use any panels in my window manager setup, I want to see current
time in the Emacs modeline.

#+begin_src emacs-lisp
  (setq display-time-default-load-average nil)
  (setq display-time-24hr-format t)
  (display-time-mode t)
#+end_src
** Fonts
* Org Mode
I use Org mode for almost everything. Here are a few basic settings, that need
to be reviewed and possibly moved elsewehere.

#+begin_src emacs-lisp
  (setq org-startup-indented t)
  (setq org-startup-folded t)
  (setq org-hide-emphasis-markers t)
  (setq org-hide-leading-stars t)
#+end_src

Increase the scale of LaTex previews.

#+begin_src emacs-lisp
  (setq org-format-latex-options
        (plist-put org-format-latex-options :scale 1.2))
#+end_src
** Todo
I used to have a =STARTED= keyword in the list, but I never really used it. I
think the current list is fine, although I'm considering adding =NEXT= to it.

#+begin_src emacs-lisp
  (setq org-todo-keywords
          '((sequence "TODO(t)"
                      "WAITING(w)"
                      "|"
                      "DONE(d)"
                      "CANCELLED(c)")))
#+end_src
** Capture
I have a template that allows me to quickly capture tasks to my GTD inbox.

#+begin_src emacs-lisp
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/org/gtd/inbox.org" "Inbox")
                                 "* TODO %i%?")))
#+end_src

Since I capture to the inbox frequently, it makes sense to have a function for
this that I can map to a key chord. (I got this from [[https://www.labri.fr/perso/nrougier/GTD/index.html][here]].)

#+begin_src emacs-lisp
  (defun org-capture-inbox ()
    (interactive)
    (call-interactively 'org-store-link)
    (org-capture nil "t"))
#+end_src

Key mappings related to org-capture.

#+begin_src emacs-lisp
  (define-key global-map (kbd "C-c c") 'org-capture)
  (define-key global-map (kbd "C-c i") 'org-capture-inbox)
#+end_src

** Refiling
Refile should always be done either to the projects file or to the 
someday/maybe list.

#+begin_src emacs-lisp
  (setq org-refile-targets '(("~/org/gtd/projects.org" :maxlevel . 3)
                             ("~/org/gtd/someday.org" :level . 1)))
#+end_src

** Habits

#+begin_src emacs-lisp
  (add-to-list 'org-modules 'org-habit t)
  (setq org-habit-show-all-today t)
#+end_src

** Agenda
The agenda should remind me of things in the inbox and the projects file.

#+begin_src emacs-lisp
    (setq org-agenda-files '("~/org/gtd/inbox.org"
                             "~/org/gtd/projects.org"))
#+end_src

** Log
Add time when logging done tasks.

#+begin_src emacs-lisp
  (setq org-log-done 'time)
#+end_src

Log into a logbook.

#+begin_src emacs-lisp
  (setq org-log-into-drawer t)
#+end_src

** Org-superstar
In the past I have used [[https://github.com/sabof/org-bullets][org-bullets]], but it gave me a few problems that I
couldn't figure out at the time. Recently, I found  [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]], which
I'm giving a try for a while.

#+begin_src emacs-lisp
  ;; (use-package org-superstar
  ;;  :ensure t)

  ;; (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

** Org-drill
I don't really use [[https://orgmode.org/worg/org-contrib/org-drill.html][org-drill]] any more, since I've gone back to Anki. But,
just in case, I'll keep my configuration here.

#+begin_src emacs-lisp
  ;; (use-package org-drill
  ;;   :ensure t)

  ;; (setq org-drill-add-random-noise-to-intervals-p t)
  ;; (setq org-drill-scope 'directory)
  ;; (setq org-drill-learn-fraction 0.4)
  ;; (setq org-drill-maximum-items-per-session 50)
  ;; (setq org-drill-maximum-duration 30)
#+end_src
* Terminal Emulation
** Vterm
Since I discovered [[https://github.com/akermu/emacs-libvterm][vterm]] it has become my standard terminal emulator for
Emacs.

#+begin_src emacs-lisp
  ;(defun lorenzo/new-vterm-instance ()
  ;  (interactive)
  ;  (vterm t))
#+end_src

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :config
    (defun lorenzo/vterm ()
      (interactive)
      (vterm t))
    :bind ("<s-return>" . lorenzo/vterm))
  ;(global-set-key (kbd "<s-return>") 'lorenzo/new-vterm-instance)
#+end_src

** Ansi term
Before vterm, I mostly used ansi-term. I'm keeping the configuration here
just in case I need it.

#+begin_src emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
  ;; (global-set-key (kbd "<s-return>") 'ansi-term)
#+end_src
* Working with Text
** Auto-completion
[[https://company-mode.github.io/][Company-mode]] is a text completion framework for Emacs. It can be very
intrusive, so I'm only going to enable it in specific modes.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.0
          company-minimum-prefix-length 2))
#+end_src
** Snippets
I use [[https://github.com/joaotavora/yasnippet][YASnippet]].

 #+begin_src emacs-lisp
   (use-package yasnippet
     :ensure t
     :config
     (yas-global-mode 1))
 #+end_src
** Whitespace
I use [[https://github.com/lewang/ws-butler][ws-butler]] to automatically clean up whitespace on save.

#+begin_src emacs-lisp
  (use-package ws-butler
    :init
    (ws-butler-global-mode t))
#+end_src
* Windows and Buffers
I find [[https://github.com/abo-abo/ace-window][ace-window]] to work well for me for quickly switching between windows.

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+end_src
* Development
** Revision Control

[[https://magit.vc/][Magit]] is amazing!

#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

** Project Management

I use [[https://github.com/bbatsov/projectile][projectile]] for project management.

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))
#+end_src
** Syntax Checking
I use [[https://www.flycheck.org/en/latest/][Flycheck]].

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode))
#+end_src

** Language Server Protocol
The [[https://en.wikipedia.org/wiki/Language_Server_Protocol][Language Server Protocol]] allows for communication between a text editor
and an LSP server, that is a server that provides features for a specific
programming language. With [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]], Emacs becomes a client to LSP servers.

I find lsp-mode to be too intrusive and over-the-top, so I don't use it much.

#+begin_src emacs-lisp
    (use-package lsp-mode
      :ensure t
      :hook
      (lsp-mode . lsp-enable-which-key-integration)
      :commands
      (lsp lsp-deferred))
#+end_src

The default keymap prefix doesn't work well for me so let's change it.

#+begin_src emacs-lisp
  (setq lsp-keymap-prefix "C-c l")
#+end_src

The [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] package adds some UI stuff.

#+begin_src emacs-lisp
  (use-package lsp-ui)
#+end_src

Here are some useful links related to lsp-mode:
- [[https://emacs-lsp.github.io/lsp-mode/page/performance/][Performance]]: from the lsp-mode site
- [[http://blog.binchen.org/posts/how-to-speed-up-lsp-mode.html][How to speed up lsp-mode]]: blog post by Chen Bin
** Programming Languages
*** C
I use the Linux style for formatting C code.

#+begin_src emacs-lisp
  (setq c-default-style "linux")
#+end_src

**** LSP
Set up lsp-mode for C.

#+begin_src emacs-lisp
  ;; (add-hook 'c-mode-hook #'lsp-deferred)
#+end_src

The language server that I'm using for C mode is clangd, which I installed
from the Arch repos.

#+begin_example
  sudo pacman -Ss clang
#+end_example
*** Go
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :config
    (add-hook 'before-save-hook 'gofmt-before-save))
#+end_src
**** Company
[[https://github.com/emacsmirror/company-go][Company-go]] uses company-mode to provide autocompletion for Go sources.

#+begin_src emacs-lisp
  ;;(use-package company-go
  ;;  :ensure t)

  ;;(add-hook 'go-mode-hook
  ;;          (lambda ()
  ;;            (set (make-local-variable 'company-backends) '(company-go))
  ;;            (company-mode)))
#+end_src
**** LSP
Set up lsp-mode to work with Go.

#+begin_src emacs-lisp
  ;; (add-hook 'go-mode-hook #'lsp-deferred)
#+end_src

In order for lsp-mode to work with Go, [[https://github.com/golang/tools/tree/master/gopls][gopls]] needs to be installed somewhere
in $PATH. ([[https://github.com/golang/tools/blob/master/gopls/doc/emacs.md][Instructions]])

#+begin_example
  $ GO111MODULE=on go get golang.org/x/tools/gopls@latest
  $ sudo cp ~/go/bin/gopls /usr/local/bin
#+end_example

Set up hooks to clean up the code on save.

#+begin_src emacs-lisp
  ;; (defun lsp-go-install-save-hooks ()
  ;;   (add-hook 'before-save-hook #'lsp-format-buffer t t)
  ;;   (add-hook 'before-save-hook #'lsp-organize-imports t t))
  ;; (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
#+end_src
*** Python
I use [[https://www.python.org/][Python]] quite a lot.

#+begin_src emacs-lisp
  (use-package python
    :ensure nil)
#+end_src

**** Virtual Environments
This packages adds support for Python virtual environents.

#+begin_src emacs-lisp
  (use-package pyvenv
    :ensure t
    :config
    (pyvenv-mode 1))
#+end_src

I want virtual environments to automatically be activated. I got the
idea from [[https://github.com/jorgenschaefer/pyvenv/issues/51][here]], although I had to modify to my needs.

#+begin_src emacs-lisp
  (defun lorenzo/pyvenv-autoload ()
    (require 'projectile)
    (let ((venv-path (f-expand ".venv" (projectile-project-root))))
      (when (f-exists? venv-path)
        (pyvenv-activate venv-path))))

  (add-hook 'python-mode-hook 'lorenzo/pyvenv-autoload)
#+end_src

**** Company-mode
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'company-mode)
#+end_src
**** LSP
Activate lsp-mode for Python.

#+begin_src emacs-lisp
  ;; (add-hook 'python-mode-hook #'lsp)
#+end_src

In order to work, lsp-mode needs a python language server. When using
virtual environments, the python language server needs to be installed
in the virtual environment itself.

#+begin_src emacs-lisp
  ;; (defun lorenzo/install-python-language-server ()
  ;;   (require 'pyvenv)
  ;;   (save-window-excursion
  ;;     (if pyvenv-virtual-env
  ;;         (async-shell-command "pip install python-language-server")
  ;;       (message "No active virtual environment"))))

  ;; (add-hook 'python-mode-hook 'lorenzo/install-python-language-server)
#+end_src

Some links to more information.
- [[https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/][Configuring Emacs, lsp-mode and the python langauge server]]

**** Elpy
An alternative to lsp-mode for python is [[https://github.com/jorgenschaefer/elpy][elpy]].

#+begin_src emacs-lisp
  ;; (use-package elpy
  ;;   :ensure t
  ;;   :hook
  ;;   ((elpy-mode . flycheck-mode))
  ;;   :init
  ;;   (elpy-enable)
  ;;   :config
  ;;  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)))
#+end_src

**** Anaconda

#+begin_src emacs-lisp
  ;; (use-package anaconda-mode
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'anaconda-mode)
  ;;   (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+end_src

#+begin_src emacs-lisp
  ;; (use-package company-anaconda
  ;;   :ensure t
  ;;   :after
  ;;   (company)
  ;;   :config
  ;;  (add-to-list 'company-backends 'company-anaconda))
#+end_src
*** Bash
**** LSP
Set up lsp-mode for bash.

#+begin_src emacs-lisp
  ;; (add-hook 'sh-mode-hook #'lsp-deferred)
#+end_src

The bash-language-server is available in the Arch repos.

#+begin_example
  $ sudo pacman -Ss bash-language-server
#+end_example

The bash language server is behaves very odd, so I don't really use it.
*** Rust

Support for Rust.

#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src

Also, add minor mode for Cargo.

#+begin_src emacs-lisp
  (use-package cargo)
  (add-hook 'rust-mode-hook 'cargo-minor-mode)
#+end_src
** Web Development

I use [[https://web-mode.org/][web-mode]] for web development.

#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (".html?$")
    :config
    (setq web-mode-enable-engine-detection t
          web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-enable-auto-closing t
          web-mode-enable-auto-opening t
          web-mode-enable-auto-indentation t))
#+end_src

If want web-mode to use the Django engine for .html files that are part of
a Django project. I found this [[https://emacs.stackexchange.com/questions/32585/set-web-mode-engine-per-directory][here]].

#+begin_src emacs-lisp
  (defun lorenzo/django-engine ()
    (if (projectile-project-p)
        (if (file-exists-p (concat (projectile-project-root) "manage.py"))
            (web-mode-set-engine "django"))))

  (add-hook 'web-mode-hook 'lorenzo/django-engine)
#+end_src

Web-mode and smartparens both want to auto-insert closing delimiters, so we
disable smartparens in web-mode.
** REST client

It's nice to have a REST client in Emacs itself.

#+begin_src emacs-lisp
  (use-package restclient)
#+end_src
** Docker

I use Docker extensively.

#+begin_src emacs-lisp
  (use-package docker
    :ensure t
    :bind ("C-c d" . docker))
#+end_src
** Utilities
*** Balancing Delimiters
[[https://github.com/Fuco1/smartparens][Smartparens]] helps to keep parenthesis balanced. However, this mode does
more harm than good in some modes, so I'm restrictive about where I
enable it. Also, some modes require a bit of extra configuration.

#+begin_src emacs-lisp
  (use-package smartparens
    :init
    (add-hook 'python-mode-hook 'smartparens-mode)
    (add-hook 'emacs-lisp-mode-hook 'smartparens-mode)
    (add-hook 'lisp-interaction-mode-hook 'smartparens-mode)
    :config
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'lisp-interaction-mode "'" nil :actions nil))
#+end_src
*** Rainbow Delimiters
[[https://github.com/Fanael/rainbow-delimiters][Rainbow Delimiters]] highlights delimiters according to their depths. I find
this quite useful.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :diminish
    :demand t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
* Living in Emacs
** Accounting
I use [[https://www.ledger-cli.org/][ledger]] to help manage my personal finances. Of course, there is a
[[https://www.ledger-cli.org/3.0/doc/ledger-mode.html][ledger-mode]] for Emacs as well.

#+begin_src lisp
  (use-package ledger-mode
    :ensure t
    :init
    (setq ledger-clear-whole-transactions 1)
    :mode "\\.ledger\\'")
#+end_src

Enable company-mode in ledger-mode.

#+begin_src emacs-lisp
  (add-hook 'ledger-mode-hook 'company-mode)
#+end_src
** Feeds
I use [[https://github.com/skeeto/elfeed][elfeed]] to subscribe to RSS feeds and podcasts.

#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t)

  (global-set-key (kbd "C-x w") 'elfeed)
#+end_src

I configure my feeds via [[https://github.com/remyhonig/elfeed-org][elfeed-org]].

#+begin_src emacs-lisp
  (use-package elfeed-org
    :ensure t
    :init
    (elfeed-org))

  (setq rmh-elfeed-org-files (list "~/org/feeds.org"))
#+end_src
** Media Player
I use [[https://www.gnu.org/software/emms/][EMMS]].

#+begin_src emacs-lisp
  (use-package emms
    :ensure t
    :config
    (progn
      (emms-standard)
      (emms-default-players)
      (setq emms-playlist-buffer-name "EMMS"
            emms-source-file-default-directory "~/musica/")))
#+end_src

Org-mode integration with EMMS is done with [[https://github.com/jagrg/org-emms][org-emms]].

#+begin_src emacs-lisp
  (use-package org-emms
    :ensure t)
#+end_src





* TODO CLEAN UP
** Fonts
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "DejaVu Sans Mono")
  (set-fontset-font t 'latin "Noto Sans")
  (set-fontset-font t 'chinese-gbk
                    (font-spec :family "Noto Sans CJK SC"))
  (set-fontset-font t 'japanese-jisx0213.2004-1
                    (font-spec :family "Noto Sans CJK JP"))
  (set-fontset-font t 'hangul
                    (font-spec :family "Noto Sans CJK KR"))
#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure t
    :config
    (progn
      ;; Copied and yanked from the Swiper doc for now.
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      ;; enable this if you want `swiper' to use it
      ;; (setq search-default-mode #'char-fold-to-regexp)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)))
#+END_SRC
** Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key [C-mouse-4] 'text-scale-increase)
(global-set-key [C-mouse-5] 'text-scale-decrease)
#+END_SRC

** Treemacs
#+begin_src emacs-lisp
  ;; copied from treemacs documentation. I should find time and go through this at
  ;; some point

  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)
#+end_src

** Docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+END_SRC
** Matrix-client
#+begin_src emacs-lisp
  (use-package matrix-client
    :quelpa (matrix-client
             :fetcher github
             :repo "alphapapa/matrix-client.el"
             :files (:defaults "logo.png" "matrix-client-standalone.el.sh")))
#+end_src
** PDF Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page))

  ;; (use-package org-pdfview
  ;;   :ensure t)
#+end_src
** Pass
#+begin_src emacs-lisp
  (use-package pass
    :ensure t)
#+end_src
